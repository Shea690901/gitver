#!/bin/bash

CONF_DIR="./.gitver"
TPL_DIR="$CONF_DIR/templates"

# need to move these here to make them available
function help {
	echo "usage: `basename $0` <init|info|bump-major|bump-minor|bump-patch|finalize-bump|update-versioninfo <template|template1 template2 templateN>>"
}

function init {
	if [[ ! -z "$CONF_DIR" ]] && [[ ! -d "$CONF_DIR" ]]; then
		mkdir -p "$CONF_DIR"
		echo "Created configuration directory \"$CONF_DIR\""
	fi

	if [[ ! -z "$TPL_DIR" ]] && [[ ! -d "$TPL_DIR" ]]; then
		mkdir -p "$TPL_DIR"
		echo "Created template directory \"$TPL_DIR\""
	fi
}

# do init this repo
case "$1" in
	init)
		init
		exit 0
		;;
esac

if [ ! -d ./.git ]; then
  echo "Please run this tool from within the root directory of your project, where the .git directory resides."
  help
  exit 1
fi

if [ ! -d "$CONF_DIR" ]; then
  echo -e "Please run \"`basename $0` init\" first."
  help
  exit 1
fi

# enumerate existing templates
TEMPLATES=`ls $TPL_DIR 2> /dev/null`

FULL_BUILD_ID=`cat .git/$(git symbolic-ref HEAD 2>/dev/null)|tr -d \n`
BUILD_ID=`echo $FULL_BUILD_ID | cut -c 1-8`
LAST_TAG_COMMIT=`git rev-list --tags --max-count=1`
LAST_TAG=`git describe --tags $LAST_TAG_COMMIT`
COMMIT_COUNT=`git log --oneline $LAST_TAG..HEAD | wc -l`
TAG_PREFIX="v"

# extract current version
#VERSION=0.9.4
VERSION=`echo $LAST_TAG | sed "s/^$TAG_PREFIX//"`
MAJOR=`echo $VERSION | sed "s/^\([0-9]*\).*/\1/"`
MINOR=`echo $VERSION | sed "s/[0-9]*\.\([0-9]*\).*/\1/"`
PATCH=`echo $VERSION | sed "s/[0-9]*\.[0-9]*\.\([0-9]*\).*/\1/"`
NOTE=`echo $VERSION | grep -o "[a-zA-Z]*"`
CURR=$MAJOR.$MINOR.$PATCH

if [ ! -z $NOTE ]; then
	CURR+=-$NOTE
fi

if [ ! $COMMIT_COUNT -eq 0 ]; then
	CURR+=-$COMMIT_COUNT
fi

CURR+=/$BUILD_ID

# compute next versions
NEXT_SUFFIX="SNAPSHOT"
NEXT_MAJOR=$[MAJOR+1].0.0-$NEXT_SUFFIX
NEXT_MINOR=$MAJOR.$[MINOR+1].0-$NEXT_SUFFIX
NEXT_PATCH=$MAJOR.$MINOR.$[PATCH+1]-$NEXT_SUFFIX
PENDING=$MAJOR.$MINOR.$PATCH

function info {
	# print info
	echo Current tag: $LAST_TAG
	echo Current version: v$CURR
	echo Current build ID: $FULL_BUILD_ID
	echo Possible next versions to bump to:
	echo "  bump-major => v$NEXT_MAJOR"
	echo "  bump-minor => v$NEXT_MINOR"
	echo "  bump-patch => v$NEXT_PATCH"
	if [ "$LAST_TAG" == "v$PENDING" ]; then
		if [ $COMMIT_COUNT -eq 0 ]; then
			echo "Next version: idleing ($LAST_TAG)"
		else
			echo "Next version: unknown, $LAST_TAG-$COMMIT_COUNT (+$COMMIT_COUNT commits)"
		fi
	else
		echo "Next version: $LAST_TAG => v$PENDING"
	fi
}

function bump_major {
	echo "Bumping from $LAST_TAG to $NEXT_MAJOR"
	if [ -z "$NOTE" ]; then
		git tag -a v$NEXT_MAJOR -m "Bumping from $LAST_TAG to v$NEXT_MAJOR"
		echo "Done, `git describe --long`"
	else
		echo "Cannot bump $LAST_TAG"
	fi
}

function bump_minor {
	echo "Bumping from $LAST_TAG to $NEXT_MINOR"
	if [ -z "$NOTE" ]; then
		git tag -a v$NEXT_MINOR -m "Bumping from $LAST_TAG to v$NEXT_MINOR"
		echo "Done, `git describe --long`"
	else
		echo "Cannot bump $LAST_TAG"
	fi
}

function bump_patch {
	echo "Bumping from $LAST_TAG to $NEXT_PATCH"
	if [ -z "$NOTE" ]; then
		git tag -a v$NEXT_PATCH -m "Bumping from $LAST_TAG to v$NEXT_PATCH"
		echo "Done, `git describe --long`"
	else
		echo "Cannot bump $LAST_TAG"
	fi
}

function finalize_bump {
	if [ "$NOTE" == "$NEXT_SUFFIX" ]; then
		git tag -a v$PENDING -m "Bumping from $LAST_TAG to v$PENDING"
		echo "Done, `git describe --long`"
	else
		echo "Cannot finalize $LAST_TAG, expected a valid suffix (-$NEXT_SUFFIX)"
	fi
}

function update_version_info {
	for T in $1; do
		# search for template
		TPL="$TPL_DIR/$T"
		echo -n "Processing \"$TPL\""
		if [ ! -f "$TPL" ]; then
			echo "\nThe specified template $TPL doesn't exists"
			exit 1
		fi

		# first line identify the output file
		OUTFILE=`head -n1 $TPL | tr -d '#' | tr -d [:blank:]`
		if [ -z "$OUTFILE" ]; then
			echo "\nCouldn't read output file from the specified template \"$TPL\""
			exit 1
		fi

		# perform bash variable substitution in template file
		eval "tail -n+2 <<EOF
$(<$TPL)
EOF
" 2> /dev/null > $OUTFILE
		echo ", wrote file file://$OUTFILE ("`du -sh "$OUTFILE" | awk '{ print $1}'`")"
	done
}


#
# main entrypoint
#

case "$1" in
	info)
		info
		;;

	bump-major)
		bump_major
		;;

	bump-minor)
		bump_minor
		;;

	bump-patch)
		bump_patch
		;;

	finalize-bump)
		finalize_bump
		;;

	update-versioninfo)
		if [ -z "$TEMPLATES" ]; then
			echo "No valid templates found, please add one to your templates directory ($TPL_DIR)"
		fi

		if [ -z "$2" ]; then
			echo -n "Please specify a valid template"
			if [ ! -z "$TEMPLATES" ]; then
				echo ", list of available templates:"
				for T in $TEMPLATES; do
					echo "    $TPL_DIR/$T"
				done
			fi

			exit 1
		fi
		update_version_info "$2"
		;;
	*)
		help
		;;
esac